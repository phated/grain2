name: Release
on:
  push:
    branches: [main]

# This will cancel previous runs when a branch or PR is updated
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  release-please:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release-pr: ${{ steps.release.outputs.pr }}
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      stdlib_tag_name: ${{ steps.release.outputs.stdlib--tag_name }}
      js-runner_tag_name: ${{ steps.release.outputs.js-runner--tag_name }}
    steps:
      - uses: GoogleCloudPlatform/release-please-action@v3.2.5
        id: release
        with:
          # Explicitly use GITHUB_TOKEN here so Release Please doesn't start a CI run that will fail
          # The correct CI run is triggered by the `generate-docs` job below when it pushes updated documentation
          token: ${{ secrets.WORKFLOW_TOKEN }}
          command: manifest

  build-preview:
    name: Build preview binaries
    needs: [release-please]
    if: ${{ needs.release-please.outputs.release-pr }}
    uses: ./.github/workflows/build-js.yml
    with:
      os: ubuntu-latest
      ref: ${{ fromJSON(needs.release-please.outputs.release-pr).headBranchName }}

  generate-docs:
    name: Generate documentation
    needs: [release-please, build-preview]
    runs-on: ubuntu-latest
    steps:
      - name: Setup bot user
        run: |
          git config --global user.email "bot@grain-lang.org"
          git config --global user.name "Grain Bot"

      - name: Checkout project
        uses: actions/checkout@v3
        with:
          ref: ${{ fromJSON(needs.release-please.outputs.release-pr).headBranchName }}
          # TODO: Figure out perms
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Fetch linux binary
        uses: actions/download-artifact@v3
        with:
          name: grain-linux-x64

      - name: Untar download
        run: |
          tar -xvf grain.tar

      - name: Regenerate documentation
        run: |
          ./grain doc stdlib -o stdlib --current-version=$(./grain -v)
          git add stdlib
          git commit -m 'chore(stdlib): Regenerate markdown documentation'
          git push

  test-preview:
    name: Test preview binaries
    needs: [release-please, generate-docs]
    uses: ./.github/workflows/test-pkg.yml
    with:
      ref: ${{ fromJSON(needs.release-please.outputs.release-pr).headBranchName }}

  upload-preview:
    name: Upload preview binaries
    needs: [release-please, test-preview]
    runs-on: ubuntu-latest
    steps:
      - name: Setup bot user
        run: |
          git config --global user.email "bot@grain-lang.org"
          git config --global user.name "Grain Bot"

      - name: Checkout project
        uses: actions/checkout@v3
        with:
          ref: ${{ fromJSON(needs.release-please.outputs.release-pr).headBranchName }}
          # TODO: Figure out perms
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Tag commit as preview
        run: |
          git tag preview -f
          git push origin preview -f

      - name: Fetch linux binary
        uses: actions/download-artifact@v3
        with:
          name: grain-linux-x64

      - name: Upload linux binary
        run: |
          tar -xvf grain.tar
          mv grain grain-linux-x64
          gh release upload preview "./grain-linux-x64" --clobber
          rm grain-linux-x64 grain.tar
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Fetch mac binary
        uses: actions/download-artifact@v3
        with:
          name: grain-mac-x64

      - name: Upload mac binary
        run: |
          tar -xvf grain.tar
          mv grain grain-mac-x64
          gh release upload preview "./grain-mac-x64" --clobber
          rm grain-mac-x64 grain.tar
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Fetch win binary
        uses: actions/download-artifact@v3
        with:
          name: grain-win-x64

      - name: Upload win binary
        run: |
          tar -xvf grain.tar
          mv grain.exe grain-win-x64.exe
          gh release upload preview "./grain-win-x64.exe" --clobber
          rm grain-win-x64.exe grain.tar
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

  prepare-artifacts:
    needs: [release-please]
    if: ${{ needs.release-please.outputs.releases_created }}
    name: Prepare artifacts
    runs-on: ubuntu-latest
    outputs:
      stdlib_download_url: ${{ steps.stdlib-upload.outputs.browser_download_url }}
      js-runner_download_url: ${{ steps.js-runner-upload.outputs.browser_download_url }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      # Many of these steps are the same as building the compiler for tests
      - name: Setup Node.js
        uses: actions/setup-node@v3.1.1
        with:
          node-version: "16"
          check-latest: true
          cache: "npm"

      - name: Setup environment
        run: |
          npm install -g shx

      - name: Set up JS runner and CLI
        run: |
          npm ci

      - name: Esy setup
        run: |
          npm run compiler prepare

      - name: Esy cache
        id: esy-cache
        uses: actions/cache@v2
        with:
          path: compiler/_export
          key: ${{ runner.os }}-esy-${{ hashFiles('compiler/esy.lock/index.json') }}

      - name: Import esy cache
        if: steps.esy-cache.outputs.cache-hit == 'true'
        # Don't crash the run if esy cache import fails - mostly happens on Windows
        continue-on-error: true
        run: |
          npm run compiler import-dependencies
          shx rm -rf compiler/_export

      # Don't build grainc.exe, only the JS builds
      # TODO(#589): Actually build the exe's these once users can install them locally
      - name: Build compiler
        run: |
          npm run compiler build:js

      # This will log a warning because we removed the grainc.exe file
      - name: Build Binaries
        run: |
          npm run cli build-pkg -- --target=win-x64,mac-x64,linux-x64

      - name: Upload Binary (Windows)
        uses: grain-lang/upload-release-action@v3.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          file: ./pkg/grain-win.exe
          asset_name: grain-win-x64.exe
          tag: ${{ needs.release-please.outputs.tag_name }}

      - name: Upload Binary (Mac)
        uses: grain-lang/upload-release-action@v3.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          file: ./pkg/grain-macos
          asset_name: grain-mac-x64
          tag: ${{ needs.release-please.outputs.tag_name }}

      - name: Upload Binary (Linux)
        uses: grain-lang/upload-release-action@v3.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          file: ./pkg/grain-linux
          asset_name: grain-linux-x64
          tag: ${{ needs.release-please.outputs.tag_name }}

      - name: Pack stdlib
        if: ${{ needs.release-please.outputs.releases_created }}
        working-directory: ./stdlib
        # Runs `npm pack` and assigns the filename to an env var we can use later
        # `sed` is used to workaround https://github.com/npm/cli/issues/3405
        run: |
          echo "STDLIB_TAR=$(npm pack --json | jq -r '.[0].filename' | sed -r 's/@//g' | sed -r 's/\//-/g')" >> $GITHUB_ENV

      - name: Upload stdlib
        id: stdlib-upload
        if: ${{ needs.release-please.outputs.releases_created }}
        uses: grain-lang/upload-release-action@v3.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          file: ./stdlib/${{ env.STDLIB_TAR }}
          asset_name: stdlib.tgz
          tag: ${{ needs.release-please.outputs.stdlib_tag_name }}

      - name: Pack js-runner
        if: ${{ needs.release-please.outputs.releases_created }}
        working-directory: ./js-runner
        # Runs `npm pack` and assigns the filename to an env var we can use later
        # `sed` is used to workaround https://github.com/npm/cli/issues/3405
        run: |
          echo "RUNNER_TAR=$(npm pack --json | jq -r '.[0].filename' | sed -r 's/@//g' | sed -r 's/\//-/g')" >> $GITHUB_ENV

      - name: Upload js-runner
        id: js-runner-upload
        if: ${{ needs.release-please.outputs.releases_created }}
        uses: grain-lang/upload-release-action@v3.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          file: ./js-runner/${{ env.RUNNER_TAR }}
          asset_name: js-runner.tgz
          tag: ${{ needs.release-please.outputs.js-runner_tag_name }}

  dispatch-website:
    needs: [release-please, prepare-artifacts]
    if: ${{ needs.release-please.outputs.releases_created }}
    name: Dispatch website release
    runs-on: ubuntu-latest
    steps:
      - uses: grain-lang/workflow-dispatch-action@v1.0.0
        with:
          workflow: Grain Release
          token: ${{ secrets.WORKFLOW_TOKEN }}
          ref: master
          repo: grain-lang/grain-lang.org
          tag_input: ${{ needs.release-please.outputs.tag_name }}

  dispatch-homebrew:
    needs: [release-please, prepare-artifacts]
    if: ${{ needs.release-please.outputs.releases_created }}
    name: Dispatch homebrew release
    runs-on: ubuntu-latest
    steps:
      - uses: grain-lang/workflow-dispatch-action@v1.0.0
        with:
          workflow: Grain Release
          token: ${{ secrets.WORKFLOW_TOKEN }}
          ref: main
          repo: grain-lang/homebrew-tap
          tag_input: ${{ needs.release-please.outputs.tag_name }}

  dispatch-docker:
    needs: [release-please, prepare-artifacts]
    if: ${{ needs.release-please.outputs.releases_created }}
    name: Dispatch Docker builds
    runs-on: ubuntu-latest
    steps:
      - uses: grain-lang/workflow-dispatch-action@v1.0.0
        with:
          workflow: Publish Docker images
          token: ${{ secrets.WORKFLOW_TOKEN }}
          ref: main
          repo: grain-lang/grain
          tag_input: ${{ needs.release-please.outputs.tag_name }}

  npm-release-stdlib:
    needs: [release-please, prepare-artifacts]
    if: ${{ needs.release-please.outputs.releases_created }}
    name: Publish stdlib to npm registry
    runs-on: ubuntu-latest
    steps:
      - name: Setup NodeJS
        uses: actions/setup-node@v3.1.1
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"

      - name: Publish to npm
        run: |
          npm publish ${{ needs.prepare-artifacts.outputs.stdlib_download_url }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_RELEASE }}

  npm-release-js-runner:
    needs: [release-please, prepare-artifacts]
    if: ${{ needs.release-please.outputs.releases_created }}
    name: Publish js-runner to npm registry
    runs-on: ubuntu-latest
    steps:
      - name: Setup NodeJS
        uses: actions/setup-node@v3.1.1
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"

      - name: Publish to npm
        run: |
          npm publish ${{ needs.prepare-artifacts.outputs.js-runner_download_url }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_RELEASE }}
